## creates a special matrix list object that can cache its inverse
CacheMatrix <- function(x = matrix()) {
  a <- NULL
  set <- function(y){
  x <<- y
  a <<- NULL
  }
  get <- function()x
  TosetInverse <- function(inverse) a <<- inverse
  TogetInverse <- function() a
  list(set = set, get = get,   TosetInverse = TosetInverse, TogetInverse = TogetInverse )
}

## This function computes the inverse of the special "matrix" returned by CacheMatrix above. 
##If the inverse has already been calculated, then the cachesolve should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {

  a <- x$TogetInverse()
  if(!is.null(a)){
  message("getting cached data")
  return(a)
  }
  matr <- x$get()  j <- solve(matr,...)  x$TosetInverse(a)
  a
}
